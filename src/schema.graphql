type User
{
	userId: Int!,
	name: String!,
	email: String!,
	picture: String,
	googleId: String,
	status: String!,
	created: String!,
	followers: [User],
	following: [User],
	tasks: [Task]
	categories: [Category]
}

type Category
{
	categoryId: Int!,
	name: String!,
	type: String!,
	userId: Int!,
	members: [Int],
	status: String,
	created: String!,
	tasks: [Task],
	count: Int
}

type Task
{
	taskId: Int!,
	userId: Int!,
	categoryId: Int!,
	title: String!,
	description: String,
	parentId: Int!,
	dueDate: String,
	created: String!,
	remarks: String,
	labels: [Int],
	status: String
}

type Label
{
	labelId: Int!,
	userId: Int!,
	name: String,
	status: String,
	created: String!,
	tasks: [Task]
}

type Query
{
	# Users
	users: [User],
	user(userId: Int!): User!,
	# Categories
	categories: [Category],
	category(categoryId: Int!): Category!,
	# Tasks
	tasks: [Task],
	task(taskId: Int!): Task!,
	# Labels
	labels: [Label]
	userLabels(userId: Int!): [Label]
}

type Mutation
{
	# User Mutations
	createUser(name: String!, email: String!, picture: String!, googleId: String!): User!,
	# Category Mutations
	createCategory(name: String!, type: String!, userId: Int!): Category!,
	removeCategory(categoryId: Int!): Category,
	editCategory(categoryId: Int!, name: String!): Category!,
	# Task Mutations
	createTask(title: String!, description: String!, parentId: Int!, categoryId: Int!, userId: Int!, due: String, labels: [Int], remarks: String): Task!
	removeTask(taskId: Int!): Task!,
	editTask(taskId: Int!, title: String, description: String, dueDate: String, remarks: String, labels: [Int]): Task!
	# Label Mutations
	editLabel(labelId: Int!, userId: Int!, title: String!): Label!
}